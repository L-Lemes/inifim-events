// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  name            String
  email           String
  password        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  configurationId String        @unique
  configuration   Configuration @relation("configurations", fields: [configurationId], references: [id])

  EventUserRole EventUserRole[]
  landlord      landlord[]
}

model Configuration {
  id            String   @id @default(uuid())
  overallVolume Int
  soundEffects  Int
  musicVolume   Int
  language      String
  textSize      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User? @relation("configurations")
}

model Event {
  id             String   @id @default(uuid())
  name           String
  slogan         String
  description    String
  numberOfGuests Int
  startDate      DateTime
  endDate        DateTime
  startTime      DateTime
  endTime        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  locationId String
  location   Location? @relation(fields: [locationId], references: [id])

  EventUserRole EventUserRole[]
}

model EventUserRole {
  id      String   @default(uuid())
  userId  String
  eventId String
  role    RoleType

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@id([userId, eventId, role])
}

model landlord {
  id         String @default(uuid())
  userId     String
  locationId String

  user     User     @relation(fields: [userId], references: [id])
  location Location @relation(fields: [locationId], references: [id])

  @@id([userId, locationId])
}

model Location {
  id          String   @id @default(uuid())
  name        String
  publicPlace String
  number      Int
  cep         Int
  isPublic    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Event    Event[]
  landlord landlord[]

  @@unique([publicPlace, number, cep, isPublic])
}

enum RoleType {
  MANAGER
  GUEST
}
